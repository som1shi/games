rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Add rules for user's files
      match /files/{fileId} {
        allow read, create: if request.auth != null && request.auth.uid == userId;
        allow update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Email rules - allow reading emails sent to you, sending emails, and updating your own emails
    match /emails/{emailId} {
      // Can read any email where you are the sender or recipient
      allow read: if request.auth != null && (
        resource.data.from == request.auth.token.email ||
        resource.data.to == request.auth.token.email
      );
      
      // Can create new emails from your email address
      allow create: if request.auth != null && request.resource.data.from == request.auth.token.email;
      
      // Can only update emails you sent or received (typically to mark as read, archive, delete)
      allow update: if request.auth != null && (
        resource.data.from == request.auth.token.email ||
        resource.data.to == request.auth.token.email
      );
      
      // Can delete only if you're the sender or recipient
      allow delete: if request.auth != null && (
        resource.data.from == request.auth.token.email ||
        resource.data.to == request.auth.token.email
      );
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if request.auth != null && resource.data.recipient == request.auth.token.email;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.recipient == request.auth.token.email;
      allow delete: if request.auth != null && resource.data.recipient == request.auth.token.email;
    }
    
    match /refiner-30/{document=**} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/roles/admin)
      );
    }
    
    match /refiner-60/{document=**} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/roles/admin)
      );
    }
    
    match /refiner-180/{document=**} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/roles/admin)
      );
    }
    
    match /refiner-300/{document=**} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/roles/admin)
      );
    }
    
    match /refiner-600/{document=**} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/roles/admin)
      );
    }
    
    match /wordsweeper/{document=**} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)/roles/admin)
      );
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
} 